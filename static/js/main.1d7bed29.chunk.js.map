{"version":3,"sources":["components/Snakedots.jsx","components/Snakefood.jsx","App.js","reportWebVitals.js","index.js"],"names":["Snakedots","this","props","snakedotsarr","map","dot","i","style","left","top","className","Component","Snakefood","food","getrandompoint","Math","floor","random","initialize","snakedotarr","speed","direction","score","App","turndirection","e","window","event","keyCode","state","setState","movesnake","snakearr","head","length","push","shift","ifcutitself","array","pop","forEach","element","gameover","ifeatfood","point","prevState","enlargesnake","increasespeed","iftouchboundary","alert","unshift","setInterval","document","onkeydown","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1d7bed29.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport '../App.css'\r\n\r\nclass Snakedots extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.snakedotsarr.map((dot,i)=>{\r\n                        const style={\r\n                            left:`${dot[0]}%`,\r\n                            top:`${dot[1]}%`\r\n                        }\r\n                        return (\r\n                            <div className=\"dot\" key={i} style={style}></div>\r\n                        )\r\n                    })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Snakedots\r\n","import React, { Component } from 'react'\r\nimport '../App.css'\r\n\r\n class Snakefood extends Component {\r\n    render() {\r\n        // console.log(this.props.food[0],this.props.food[1]);\r\n        const style = {\r\n            left: `${this.props.food[0]}%`,\r\n            top: `${this.props.food[1]}%`\r\n          } \r\n        return (\r\n            <div className=\"food-dot\" style={style}></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Snakefood\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport Snakedots from './components/Snakedots'\nimport Snakefood from './components/Snakefood'\n\nconst getrandompoint = ()=>{\n  let min=1;\n  let max=98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y =  Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x,y]\n}\n\nconst initialize={\n  food:getrandompoint(),\n  snakedotarr:[\n    [0,0],[2,0]\n  ],\n  speed:50,\n  direction:'RIGHT',\n  score:0\n\n}\n\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props)\n  \n    this.state =initialize\n  }\n  \n\n\n  componentDidMount(){\n    setInterval(this.movesnake, this.state.speed);\n    document.onkeydown=this.turndirection;\n  }\n\n\n  componentDidUpdate(){\n      this.ifcutitself();\n      this.iftouchboundary();\n      this.ifeatfood();\n  }\n\nturndirection=(e)=>{\n  e=e||window.event;\n     switch (e.keyCode) {\n       case 37:\n         if(this.state.direction==='LEFT' || this.state.direction==='RIGHT')\n         break;\n        this.setState({direction:'LEFT'});\n         break;\n         case 38:\n          if(this.state.direction==='UP' || this.state.direction==='DOWN')\n          break;\n          this.setState({direction:'UP'});\n         break;\n         case 39:\n          if(this.state.direction==='LEFT' || this.state.direction==='RIGHT')\n          break;\n          this.setState({direction:'RIGHT'});\n         break;\n         case 40:\n          if(this.state.direction==='UP' || this.state.direction==='DOWN')\n          break;\n         this.setState({direction:'DOWN'});\n         break;   \n         default:\n           break;   \n     }\n}\n\nmovesnake=()=>{\n let snakearr=[...this.state.snakedotarr];\n let head=this.state.snakedotarr[this.state.snakedotarr.length-1];\n let dir=this.state.direction;\n  switch (dir) {\n    case 'LEFT':\n      head=[head[0]-2,head[1]];\n      break;\n      case 'UP':\n      head=[head[0],head[1]-2];\n      break;\n      case 'RIGHT':\n      head=[head[0]+2,head[1]];\n      break;\n      case 'DOWN':\n      head=[head[0],head[1]+2];\n      break;\n      default:\n        break;   \n  }\n  snakearr.push(head);\n  snakearr.shift();\n  this.setState({\n    snakedotarr:snakearr\n  })\n}\n\nifcutitself=()=>{\n  let array=[...this.state.snakedotarr];\n  let head=array[array.length-1];\n  array.pop();\n  array.forEach(element => {\n    if(element[0]===head[0] && element[1]===head[1])\n    {\n      this.gameover();\n    }\n  });\n}\n\nifeatfood=()=>{\n  let head=this.state.snakedotarr[this.state.snakedotarr.length-1];\n  let point=this.state.food;\n   if(head[0]===point[0] && head[1]===point[1])\n   {\n     this.setState(prevState=>{\n       return {score:prevState.score+2};\n     })\n    // console.log(this.state.speed);\n     this.setState({\n       food:getrandompoint()\n     })\n     this.enlargesnake();\n     this.increasespeed();\n    }\n  }\n\niftouchboundary=()=>{\n     let head=this.state.snakedotarr[this.state.snakedotarr.length-1];\n      if(head[0]<0 || head[0]>=100 || head[1]<0 || head[1]>=100)\n      {\n        this.gameover();\n      }\n}\n\ngameover=()=>{\n    this.setState({\n      food:getrandompoint(),\n      snakedotarr:[\n        [0,0],[2,0]\n      ],\n      speed:50,\n      direction:'RIGHT',\n      score:0\n    })\n    alert(`GAME OVER YOUR SCORE IS : ${this.state.score}`);\n}\n\n\nenlargesnake=()=>{\n   let array=[...this.state.snakedotarr];\n   array.unshift([]);\n   this.setState({\n     snakedotarr:array\n   })\n}\n\nincreasespeed=()=>{\n if(this.state.speed>10)\n      this.setState({\n         speed:this.state.speed-10\n      })\n}\n\n\n\n\n\n\n\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"heading\">Snake Game</h1>\n        <h3 className=\"heading\">Your Score : {this.state.score}</h3>\n      <div className=\"App\">\n        \n        <Snakedots snakedotsarr={this.state.snakedotarr} />\n        <Snakefood food={this.state.food} />\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}